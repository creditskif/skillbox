# -*- coding: utf-8 -*-
from random import randint

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

# TODO здесь ваш код...
N = 4 #размер числа
comp_number = []
people_number = []
B, C = 0, 0

def random_number():
    for i in range(N):
        if i == 0:
            x = randint(1, 9)
        else:
            x = randint(0, 9)
            while comp_number.count(x) > 0:
                x = randint(0, 10)
        comp_number.append(x)
    return comp_number


def check_number(bulls, cows):
    for i in range(N):
        if people_number[i] == comp_number[i]:
            bulls += 1
        else:
            if comp_number.count(people_number[i]) > 0:
                cows += 1
    return bulls, cows


def main():
    print(random_number())
    print("Введите четырехзначное число c неповторяющимися цифрами  - ")
    for _ in range(4):
        num = int(input())
        while people_number.count(num) > 0:
            num = input("Данное число уже есть, введите другое\n")
        people_number.append(int(num))
    print("Вы ввели", people_number)
    B, C = check_number(0, 0)
    print("Быки - ", B, "коровы - ", C)
    print("Хотите попробоват еще раз?\nВведите 1 - да, 2 - нет")
    otvet = input()
    if otvet == "1":
        people_number.clear()
        comp_number.clear()
        main()


main()
